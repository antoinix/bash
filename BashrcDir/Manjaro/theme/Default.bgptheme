# ===
# === Default Theme for Bash-git
# ===

unset_git_prompt_colors() {
  unset Time12a
  unset PathShort
  unset GIT_PROMPT_PREFIX
  unset GIT_PROMPT_SUFFIX
  unset GIT_PROMPT_SEPARATOR
  unset GIT_PROMPT_BRANCH
  unset GIT_PROMPT_STAGED
  unset GIT_PROMPT_CONFLICTS
  unset GIT_PROMPT_CHANGED
  unset GIT_PROMPT_REMOTE
  unset GIT_PROMPT_UNTRACKED
  unset GIT_PROMPT_STASHED
  unset GIT_PROMPT_CLEAN
  unset GIT_PROMPT_COMMAND_OK
  unset GIT_PROMPT_COMMAND_FAIL
  unset GIT_PROMPT_VIRTUALENV
  unset GIT_PROMPT_UPSTREAM
  unset GIT_PROMPT_START_USER
  unset GIT_PROMPT_START_ROOT
  unset GIT_PROMPT_END_USER
  unset GIT_PROMPT_END_ROOT
  unset GIT_PROMPT_SYMBOLS_AHEAD
  unset GIT_PROMPT_SYMBOLS_BEHIND
  unset GIT_PROMPT_SYMBOLS_PREHASH
  unset GIT_PROMPT_SYMBOLS_NO_REMOTE_TRACKING
}

define_helpers() {
  Time12a="[\$(date +%H:%M:%S)] ¬ª"
  PathShort="\w";
}

define_undefined_git_prompt_colors() {
  if [ -z ${GIT_PROMPT_THEME_NAME:+x} ]; then GIT_PROMPT_THEME_NAME="Default"; fi
  if [ -z "${GIT_PROMPT_PREFIX+x}" ]; then GIT_PROMPT_PREFIX="["; fi                 # start of the git info string
  if [ -z "${GIT_PROMPT_SUFFIX+x}" ]; then GIT_PROMPT_SUFFIX="]"; fi                 # the end of the git info string
  if [ -z "${GIT_PROMPT_SEPARATOR+x}" ]; then GIT_PROMPT_SEPARATOR="|"; fi           # separator of each item
  if [ -z "${GIT_PROMPT_BRANCH+x}" ]; then GIT_PROMPT_BRANCH="${Magenta}"; fi        # the active git branch
  if [ -z "${GIT_PROMPT_STAGED+x}" ]; then GIT_PROMPT_STAGED="${Red}‚òØ "; fi          # the number of staged objects
  if [ -z "${GIT_PROMPT_CONFLICTS+x}" ]; then GIT_PROMPT_CONFLICTS="${Red}üí£"; fi    # the number of objects in conflict
  if [ -z "${GIT_PROMPT_CHANGED+x}" ]; then GIT_PROMPT_CHANGED="${Cyan}‚úé "; fi       # the number of changed files
  if [ -z "${GIT_PROMPT_REMOTE+x}" ]; then GIT_PROMPT_REMOTE=" "; fi                 # the remote branch name
  if [ -z "${GIT_PROMPT_UNTRACKED+x}" ]; then GIT_PROMPT_UNTRACKED="${Blue}üîç"; fi   # the number of untracked objects
  if [ -z "${GIT_PROMPT_STASHED+x}" ]; then GIT_PROMPT_STASHED="${BoldBlue}‚öë "; fi   # the number of stashed objects
  if [ -z "${GIT_PROMPT_CLEAN+x}" ]; then GIT_PROMPT_CLEAN="${BoldGreen}üåú"; fi      # the flag indicating a "clean" repo

  # indicator if the last command returned with an exit code of 0
  if [ -z "${GIT_PROMPT_COMMAND_OK+x}" ]
  then
      GIT_PROMPT_COMMAND_OK="${Green}Óûï antoine"
  fi

  # indicator if the last command returned with an exit code of other than 0
  if [ -z "${GIT_PROMPT_COMMAND_FAIL+x}" ]
  then GIT_PROMPT_COMMAND_FAIL="${Red}‚òí antoine-_LAST_COMMAND_STATE_"
  fi

  # used if the active git branch is $GIT_PROMPT_MASTER_BRANCHES
  if [ -z "${GIT_PROMPT_MASTER_BRANCH+x}" ]
  then GIT_PROMPT_MASTER_BRANCH="${GIT_PROMPT_BRANCH}"
  fi

  # Point out the command to get the git status from
  if [ -z "${GIT_PROMPT_STATUS_COMMAND+x}" ]
  then GIT_PROMPT_STATUS_COMMAND="gitstatus.sh"
  fi

  # template for displaying the current virtual environment
  if [ -z "${GIT_PROMPT_VIRTUALENV+x}" ]; then GIT_PROMPT_VIRTUALENV="(${Blue}_VIRTUALENV_${ResetColor}) "; fi

  # template for displaying the current remote tracking branch
  if [ -z "${GIT_PROMPT_UPSTREAM+x}" ]; then GIT_PROMPT_UPSTREAM=" {${Blue}_UPSTREAM_${ResetColor}}"; fi

  # _LAST_COMMAND_INDICATOR_ will be replaced by the appropriate GIT_PROMPT_COMMAND_OK OR GIT_PROMPT_COMMAND_FAIL
  if [ -z "${GIT_PROMPT_START_USER+x}" ]; then GIT_PROMPT_START_USER="_LAST_COMMAND_INDICATOR_ ${Yellow}${PathShort}${ResetColor}"; fi
  if [ -z "${GIT_PROMPT_START_ROOT+x}" ]; then GIT_PROMPT_START_ROOT="${GIT_PROMPT_START_USER}"; fi
  if [ -z "${GIT_PROMPT_END_USER+x}" ]; then GIT_PROMPT_END_USER=" \n${White}${Time12a}${ResetColor} $ "; fi
  if [ -z "${GIT_PROMPT_END_ROOT+x}" ]; then GIT_PROMPT_END_ROOT=" \n${White}${Time12a}${ResetColor} # "; fi

  if [ -z ${GIT_PROMPT_SYMBOLS_AHEAD+x} ]; then GIT_PROMPT_SYMBOLS_AHEAD="‚è©¬∑"; fi   # The symbol for "n versions ahead of origin"
  if [ -z ${GIT_PROMPT_SYMBOLS_BEHIND+x} ]; then GIT_PROMPT_SYMBOLS_BEHIND="‚è™¬∑"; fi # The symbol for "n versions behind of origin"
  if [ -z ${GIT_PROMPT_SYMBOLS_PREHASH+x} ]; then GIT_PROMPT_SYMBOLS_PREHASH=":"; fi # Written before hash of commit

  # This symbol is written after the branch, if the branch is not tracked
  if [ -z ${GIT_PROMPT_SYMBOLS_NO_REMOTE_TRACKING+x} ]
  then GIT_PROMPT_SYMBOLS_NO_REMOTE_TRACKING="ÔÑà "
  fi

  # master
  if [ -z ${GIT_PROMPT_MASTER_BRANCHES+x} ]; then GIT_PROMPT_MASTER_BRANCHES="master"; fi
}

# call only from theme file
reload_git_prompt_colors() {
  if [[ "${GIT_PROMPT_THEME_NAME-}" != "${1}" ]]; then
    unset_git_prompt_colors
    define_helpers
    override_git_prompt_colors
    define_undefined_git_prompt_colors
  fi
}

if [[ "${GIT_PROMPT_THEME-}" == "Default" && "${GIT_PROMPT_THEME_NAME-}" != "Default" ]]; then
  define_helpers
  define_undefined_git_prompt_colors
fi
